// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Admin Users who manage the system
model AdminUser {
    id        String   @id @default(cuid())
    email     String   @unique
    name      String?
    password  String // Hashed password
    role      UserRole @default(ADMIN)
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    processedOrders ProcessingLog[]

    @@map("admin_users")
}

// E-commerce customers who send orders
model Customer {
    id         String  @id @default(cuid())
    name       String
    email      String  @unique
    apiKey     String  @unique
    apiSecret  String // Hashed API secret
    webhookUrl String
    isActive   Boolean @default(true)

    // Customer settings
    currency           String             @default("USD")
    timezone           String             @default("UTC")
    processingPriority ProcessingPriority @default(NORMAL)

    // Notification preferences
    emailNotifications   Boolean @default(true)
    webhookNotifications Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    orders            Order[]
    webhookDeliveries WebhookDelivery[]
    webhookSecret     WebhookSecret?

    @@map("customers")
}

// Orders received from customers
model Order {
    id              String  @id @default(cuid())
    externalOrderId String // Customer's order ID
    orderNumber     String? // Customer's order number
    customerId      String
    customerEmail   String?

    // Order status and processing
    status   OrderStatus        @default(PENDING)
    priority ProcessingPriority @default(NORMAL)

    // Financial information
    originalTotal  Decimal
    processedTotal Decimal?
    currency       String   @default("USD")

    // Customer information
    shippingAddress Json // Shipping address object
    billingAddress  Json? // Billing address object

    // Promo/discount information
    promoCode      String?
    discountAmount Decimal?

    // Processing information
    processingNotes         String?
    estimatedProcessingTime String?

    // Timestamps
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    processedAt DateTime?

    // Relations
    customer        Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
    items           OrderItem[]
    processingLog   ProcessingLog[]
    WebhookDelivery WebhookDelivery[]

    @@unique([customerId, externalOrderId])
    @@map("orders")
}

// Individual items within orders
model OrderItem {
    id      String @id @default(cuid())
    orderId String

    // Product information
    productId      String
    name           String
    originalPrice  Decimal
    processedPrice Decimal?
    quantity       Int

    // Product options/variations
    options Json? // Size, color, etc.

    // Seller information
    sellerId   String?
    sellerName String?

    // Taobao-specific information
    taobaoUrl  String?
    taobaoData Json? // Taobao product metadata

    // Item status
    status ItemStatus @default(PENDING)
    notes  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

    @@map("order_items")
}

// Processing log for audit trail
model ProcessingLog {
    id          String  @id @default(cuid())
    orderId     String
    adminUserId String?

    // Log details
    action   ProcessingAction
    status   OrderStatus?
    notes    String?
    metadata Json? // Additional processing data

    createdAt DateTime @default(now())

    // Relations
    order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
    adminUser AdminUser? @relation(fields: [adminUserId], references: [id], onDelete: SetNull)

    @@map("processing_logs")
}

// Taobao-specific product data
model TaobaoProduct {
    id           String @id @default(cuid())
    taobaoItemId String @unique
    url          String

    // Product details
    title        String
    price        Decimal?
    currency     String   @default("CNY")
    availability String? // IN_STOCK, OUT_OF_STOCK, etc.

    // Product metadata
    images         Json? // Array of image URLs
    specifications Json? // Product specs
    variations     Json? // Size, color options

    // Verification status
    verified    Boolean  @default(false)
    lastChecked DateTime @default(now())

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("taobao_products")
}

// Webhook delivery tracking
model WebhookDelivery {
    id         String  @id @default(cuid())
    customerId String
    orderId    String?

    // Webhook details
    eventType  String // 'order.completed', 'order.failed', 'order.status_changed'
    webhookUrl String
    payload    Json
    signature  String

    // Delivery status
    status       WebhookStatus @default(PENDING)
    httpStatus   Int?
    responseBody String?
    errorMessage String?

    // Retry logic
    attemptCount Int       @default(0)
    maxRetries   Int       @default(20)
    nextRetryAt  DateTime?

    // Timestamps
    createdAt   DateTime  @default(now())
    completedAt DateTime?

    // Relations
    customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    order    Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)

    @@map("webhook_deliveries")
}

// Customer webhook secrets for HMAC signing
model WebhookSecret {
    customerId String   @id
    secret     String
    createdAt  DateTime @default(now())

    // Relations
    customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

    @@map("webhook_secrets")
}

// Enums
enum UserRole {
    ADMIN
    SUPER_ADMIN
}

enum ProcessingPriority {
    LOW
    NORMAL
    HIGH
    URGENT
}

enum OrderStatus {
    PENDING // Just received
    PROCESSING // Being worked on
    COMPLETED // Successfully processed
    FAILED // Processing failed
    CANCELLED // Cancelled by customer
    ON_HOLD // Temporarily paused
}

enum ItemStatus {
    PENDING // Not yet processed
    VERIFIED // Product verified
    PROCESSING // Being processed
    COMPLETED // Successfully processed
    FAILED // Processing failed
    OUT_OF_STOCK // Product unavailable
}

enum ProcessingAction {
    ORDER_RECEIVED
    PROCESSING_STARTED
    ITEM_VERIFIED
    PRICE_UPDATED
    STATUS_CHANGED
    NOTES_ADDED
    ORDER_COMPLETED
    ORDER_FAILED
    ORDER_CANCELLED
    RESUMED_FROM_HOLD
}

enum WebhookStatus {
    PENDING // Waiting to be sent
    SUCCESS // Successfully delivered
    FAILED // Failed to deliver
    RETRYING // Currently retrying
    ABANDONED // Max retries exceeded
}
